import streamlit as st
import requests
import asyncio
import aiohttp
from qdrant_client import QdrantClient
from sentence_transformers import SentenceTransformer

# --- Page Config ---
st.set_page_config(
    page_title="NotionAtlas",
    page_icon="üß≠",
    layout="wide"
)

# --- Title with Inline GitHub Icon ---
st.markdown(
    """
    <div style="display:flex; justify-content:center; align-items:center; gap:5px; padding: 10px 0;">
        <h1 style="margin-bottom:0;">üß≠ NotionAtlas AI</h1>
    </div>
    <h3 style="text-align:center; color: gray; font-weight: 400; margin-top: 0;">
        Turn your Notion workspace into an intelligent, searchable knowledge hub.
    </h3>
    """,
    unsafe_allow_html=True
)



# --- Load Secrets ---
LLAMA_API_URL = "https://api.llama.com/v1/chat/completions"
LLAMA_API_KEY = st.secrets["LLAMA_API_KEY"]
QDRANT_URL = st.secrets["QDRANT_URL"]
QDRANT_API_KEY = st.secrets["QDRANT_API_KEY"]
HF_TOKEN = st.secrets.get("HF_TOKEN", None)

COLLECTION_NAME = "notion_content"
EMBEDDING_MODEL = "all-MiniLM-L6-v2"

# --- Initialize Clients ---
qdrant = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)
embedder = SentenceTransformer(EMBEDDING_MODEL, use_auth_token=HF_TOKEN)

# --- Session State ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "conversation_context" not in st.session_state:
    st.session_state.conversation_context = ""


# --- Async Chat Function ---
async def chat_with_memory(user_input: str):
    # 1Ô∏è‚É£ Encode query
    vector = embedder.encode(user_input).tolist()
    
    # 2Ô∏è‚É£ Query Qdrant
    results = qdrant.query_points(
        collection_name=COLLECTION_NAME,
        query=vector,
        limit=5
    )

    # 3Ô∏è‚É£ Prepare semantic context
    context = "\n".join([
        hit.payload.get('chunk_text', '') for hit in results.points
    ]) or "No relevant context found."

    # 4Ô∏è‚É£ Update conversation memory
    st.session_state.conversation_context += f"\nUser: {user_input}"
    combined_context = (
        f"Conversation history:\n{st.session_state.conversation_context}\n\n"
        f"Relevant Notion context:\n{context}"
    )

    # 5Ô∏è‚É£ Call LLAMA API
    payload = {
        "model": "Llama-4-Maverick-17B-128E-Instruct-FP8",
        "messages": [
            {
                "role": "system",
                "content": (
                    """
                    You are NotionAtlas AI, a highly specialized assistant designed to answer questions based on the provided workspace context. Your primary function is to utilize the information available within the workspace to deliver accurate and relevant responses to user inquiries.
                    Your task is to respond to user questions while adhering to the following guidelines: When there is sufficient information in the workspace context, provide answers strictly based on that context. However, if the context lacks adequate information to fully address the user's question, you should rely on your general knowledge to formulate a response. In such cases, always begin your response with the disclaimer: "Note: This answer is **generated by¬†LLAMA**¬†& falls¬†**outside the scope of the Notion workspace data.**" After including this note, proceed with your answer without further explanation.
                    Keep your responses concise, accurate, and aligned with the workspace context whenever possible.
                    Workspace context: __________
                    User question: __________
                    """
                )
            },
            {"role": "user", "content": combined_context}
        ],
        "max_tokens": 500,
        "temperature": 0.2
    }

    headers = {"Authorization": f"Bearer {LLAMA_API_KEY}", "Content-Type": "application/json"}

    async with aiohttp.ClientSession() as session:
        async with session.post(LLAMA_API_URL, json=payload, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                answer = data["completion_message"]["content"]["text"].strip()
            else:
                answer = f"Error: {await resp.text()}"

    # 6Ô∏è‚É£ Save to chat history and memory
    st.session_state.chat_history.append({"role": "user", "content": user_input})
    st.session_state.chat_history.append({"role": "assistant", "content": answer})
    st.session_state.conversation_context += f"\nAssistant: {answer}"

    return answer


# --- Chat Input ---
user_input = st.chat_input("Ask a question about your Notion workspace...")

if user_input:
    with st.spinner("Thinking..."):
        asyncio.run(chat_with_memory(user_input))

# --- Display Chat History ---
for msg in st.session_state.chat_history:
    if msg["role"] == "user":
        st.chat_message("user").markdown(msg["content"])
    else:
        st.chat_message("assistant").markdown(msg["content"])

# --- SIDEBAR: Branding, Tagline, GitHub, Author ---
with st.sidebar:
    st.markdown(
        """
        <div style="
            background: linear-gradient(135deg,#f8faff 88%,#ece8ff 100%);
            border-radius: 18px;
            padding: 34px 18px 26px 18px;
            box-shadow: 0 4px 36px rgba(110,120,170,0.07);
            border: 1px solid #f2f3f7;
            margin-top:22px;
            margin-bottom:10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            ">
            <img src="https://upload.wikimedia.org/wikipedia/commons/4/45/Notion_app_logo.png" width="74" style="margin-bottom: 1.1em; margin-top:-8px;" />
            <div style="font-size: 2em; font-weight: 900; letter-spacing: -1.5px; margin-bottom:0.17em; color:#1d1d2f; font-family: 'Inter',sans-serif;">
                NotionAtlas
            </div>
            <div style="color: #7d7e8a; font-size: 1.15em; font-style:italic; font-weight:500; margin-bottom:1.7em; text-align:center; max-width:220px;">
                AI Semantic Search & RAG Assistant for Notion
            </div>
            <a href="https://github.com/Yashraj-Muthyapwar/NotionAtlas-AI-Semantic-Search-And-RAG-Assistant-for-Notion" 
               target="_blank" 
               style="text-decoration:none; margin-bottom:1.7em; display:inline-flex; align-items:center; gap:0.35em;">
                <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/github/github-original.svg" width="27" style="vertical-align:middle; margin-bottom:2px;" />
                <span style="font-size:1.17em; font-weight:700; color: #212127;">View on <span style="color:#6562f2">GitHub</span></span>
            </a>
            <hr style="border:none; border-top:1.2px solid #e6e6ef; width: 96%; margin: 0.8em 0 1.3em 0;">
            <div style="color:#9f9fbe; font-size:1.07em; text-align:center;">
                Built by <a href="https://github.com/Yashraj-Muthyapwar" 
                    target="_blank" 
                    style="color:#6c63ff; font-weight:700; text-decoration:none;">
                    Yashraj Muthyapwar
                </a>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )



