import streamlit as st
import requests
import asyncio
import aiohttp
from qdrant_client import QdrantClient
from sentence_transformers import SentenceTransformer

# --- Streamlit Page Config ---
st.set_page_config(page_title="NotionAtlas ‚Äì AI Semantic Search", page_icon="üß≠", layout="wide")
st.title("üß≠ NotionAtlas: AI-Powered Semantic Search for Notion")
st.caption("Conversational memory + semantic search for your Notion workspace.")

# --- Load Secrets from Streamlit Cloud ---
LLAMA_API_URL = "https://api.llama.com/v1/chat/completions"
LLAMA_API_KEY = st.secrets["LLAMA_API_KEY"]
QDRANT_URL = st.secrets["QDRANT_URL"]
QDRANT_API_KEY = st.secrets["QDRANT_API_KEY"]

COLLECTION_NAME = "notion_content"
EMBEDDING_MODEL = "all-MiniLM-L6-v2"

# --- Initialize Clients ---
qdrant = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)
embedder = SentenceTransformer(EMBEDDING_MODEL)

# --- Session State for Memory ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "conversation_context" not in st.session_state:
    st.session_state.conversation_context = ""

# --- Async Chat Function ---
async def chat_with_memory(user_input: str):
    # 1Ô∏è‚É£ Generate embedding
    vector = embedder.encode(user_input).tolist()

    # 2Ô∏è‚É£ Retrieve from Qdrant
    results = qdrant.query_points(
        collection_name=COLLECTION_NAME,
        query=vector,
        limit=5
    )

    # 3Ô∏è‚É£ Build semantic context
    context = "\n".join([
        hit.payload.get('chunk_text', '') for hit in results.points
    ]) or "No relevant context found."

    # 4Ô∏è‚É£ Append to conversation memory
    st.session_state.conversation_context += f"\nUser: {user_input}"
    combined_context = (
        f"Conversation history:\n{st.session_state.conversation_context}\n\n"
        f"Relevant Notion context:\n{context}"
    )

    # 5Ô∏è‚É£ Call LLAMA API asynchronously
    payload = {
        "model": "Llama-4-Maverick-17B-128E-Instruct-FP8",
        "messages": [
            {
                "role": "system",
                "content": (
                    "You are NotionAtlas, an AI assistant for Notion workspace queries. "
                    "Use the context if available. If context is insufficient, "
                    "start with: 'Note: This answer is **generated by LLAMA** "
                    "& falls **outside the scope of the Notion workspace data.**'"
                )
            },
            {"role": "user", "content": combined_context}
        ],
        "max_tokens": 500,
        "temperature": 0.2
    }

    headers = {"Authorization": f"Bearer {LLAMA_API_KEY}", "Content-Type": "application/json"}

    async with aiohttp.ClientSession() as session:
        async with session.post(LLAMA_API_URL, json=payload, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                answer = data["completion_message"]["content"]["text"].strip()
            else:
                answer = f"Error: {await resp.text()}"

    # 6Ô∏è‚É£ Update memory
    st.session_state.chat_history.append({"role": "user", "content": user_input})
    st.session_state.chat_history.append({"role": "assistant", "content": answer})
    st.session_state.conversation_context += f"\nAssistant: {answer}"

    return answer

# --- Streamlit Chat Input ---
user_input = st.chat_input("Ask a question about your Notion workspace...")

if user_input:
    with st.spinner("Thinking..."):
        answer = asyncio.run(chat_with_memory(user_input))

# --- Display Chat ---
for msg in st.session_state.chat_history:
    if msg["role"] == "user":
        st.chat_message("user").markdown(msg["content"])
    else:
        st.chat_message("assistant").markdown(msg["content"])
